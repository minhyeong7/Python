### df2 = pd.DataFrame([[15, '남', '덕영중'], [17, '여', '수리중']],
                   index=['준서', '예은'],
                   columns=['나이', '성별', '학교'])

### 딕셔너리로 넣는 경우
dict_data = {'c0':[1,2,3], 'c1':[4,5,6], 'c2':[7,8,9]}
df = pd.DataFrame(dict_data)

###################################################

### <인덱스, 컬럼이름 설정> -- 전체 바꿈
df2.index=['학생1', '학생2']
df2.columns=['연령', '남녀', '소속']

### <rename> -- 지정해서 바꿈
df2.rename(index={'학생1':'김학생'}, inplace=True)
df2 = df2.rename(columns={'연령':'age', '남녀':'gender'})

### <set_index>
ndf = df.set_index('이름')  --- 기존 인덱스 사라짐.

### <reindex>
ndf = df.reindex(columns=['이름', '영어'])
ndf = df.reindex(index=new_index)
--- 기존 개수, 종류 상관 없이 '이름','영어'로 재생성 (자리 바꾸기 가능)
--- 없던 컬럼이라면 NaN 값으로 채워짐
--- fill_value=80 --- 옵션값으로 채워짐

### <reset_index>
ndf = df.reset_index()  --- 기존 인덱스 컬럼으로 올리고 + 숫자인덱스
drop=True 옵션 주면 기존 인덱스 삭제

### <sort_index, sort_values>
ndf = df.sort_index(ascending=True)  --- 인덱스 순서로 정렬
ndf = df.sort_values(by='수학')  --- 컬럼 순서로 정렬

###################################################

### <drop>
df3 = df.drop('철수', axis=0)
df2 = df.drop('수학', axis=1)
df3 = df.drop(['수학', '영어'], axis=1) ***

###################################################
### <행선택>
df.loc['철수']     df.loc[['철수', '영희']]    df.loc['철수':'영희']
df.iloc[0]          df.iloc[[0, 1]]	            df.iloc[0:1]

### <열선택> ***
df['수학']        df[['수학', '영어']]

### <행,열 선택>
df.iloc[0:5] ---  0~4 행선택
df.iloc[0:10:2]  --- 0~9 사이 두칸씩 건너 선택
df.iloc[0:5, 3:8]  --- 0~4행, 3~7열 선택
df.iloc[ : , 5:10] --- 모든행, 5~9열 선택

### <다양한 선택>
df.loc['철수', '수학']                         df2 = df.iloc[0,0]    --- 원소반환
df.loc['철수', ['수학', '영어']]              df3 = df.iloc[0, [0, 1]]  --- 시리즈 반환
df.loc[['철수', '정수'], ['수학', '영어']]   df.iloc[[0, 2], [0, 1]]   --- 데이터 반환
df.loc['철수':'정수', '수학':'영어']         df.iloc[0:3, 0:1]        --- 데이터 반환
df.loc['동수', '사회':'미술']

#################################################

### <열 추가>
df['국어'] = 80  ----  열선택과 같음. 데이터 80으로 통일.
df['미술'] = [80, 90, 70]  --- 데이터 다 넣으려면 개수 맞추기.

### <행 추가>
df.loc['동수'] = 0   ---- 행선택과 같음. 데이터 0으로 통일.
df.loc['말숙'] = [34, 54, 77] --- 데이터 다 넣으려면 개수 맞추기.

#################################################

### <원소 값 변경>
df.loc['동수', '수학'] = 65
df.iloc[3, 1] = 70
df.loc['동수', '사회':'미술'] = [90, 98, 100]
--- 어쨌든 범위 선택해서 데이터 넣어주면 됨.

### <전치>
df = df.transpose()
df = df.T

#################################################
titanic = sns.load_dataset('titanic')
print(df.head()) --- 상위 5개
print(df.tail())  --- 하위 5개
df.info()
df.shape
df.dtypes
df.describe()
df['origin'].value_counts()

#################################################

print(df[df['age'] < 20]) --- 조건에 해당하는 자료만

mask1 = (titanic['age'] >= 10) & (titanic['age'] < 20)
df_teenage = titanic[mask1]

df_female_under10 = titanic.loc[mask2, ['age', 'sex']]
titanic['df_y_o'] = mask3

#################################################

df = pd.read_csv(file_path)  
df = pd.read_excel('data\남북한발전전력량.xlsx')
df = pd.read_json('./data/read_json_sample.json')

df.to_csv("./data/df_sample.csv")
df.to_json("./data/df_sample.json")
df.to_excel("./data/df_sample.xlsx")

#################################################

df['deck'].value_counts(dropna=False)

df.isnull()  --- 널값이면 True, False
df.isnull().sum(axis=0) --- 모든컬럼 널 합계

df.dropna()  --- ???
df.dropna(axis=1) --- ???
df.dropna(subset=['age'], axis=0) --- ???
df.dropna(subset=['age', 'deck'], axis=0) --- ???

df['embark_town'].mode()[0]

df['age'].fillna(mean_age)

df['embark_town'].ffill()
df['embark_town'].bfill()

#################################################

df.duplicated()
df['c2'].duplicated()
df.duplicated(subset=['c2'])

df.drop_duplicates()
df.drop_duplicates(subset=['c2', 'c3'])

#################################################

df['horsepower'].unique()
df['horsepower'].replace('?', np.nan)
df['horsepower'].astype('float')
df['origin'].replace({1:'USA', 2:'EU', 3:'JPN'})

### 범주 자료형 ###
df['origin'].astype('category')

#################################################

label_encoder.fit_transform(data1)
onehot_encoder.fit_transform(data2)

scaler = MinMaxScaler()
scaler.fit_transform(df[['horsepower']])

scaler = StandardScaler()
scaler.fit_transform(df[['horsepower']])

#################################################

df['new_Date'] = pd.to_datetime(df['Date'])








